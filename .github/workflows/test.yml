name: Run Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: mydatabase
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U myuser" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

      redis:
        image: bitnami/redis:latest
        ports:
          - 6379:6379
        env:
          REDIS_PASSWORD: myredispasswordfortests
        options: >-
          --health-cmd "redis-cli -a ${REDIS_PASSWORD} ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Étape 1: Checker le code
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2: Installer Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.17

      # Étape 3: Installer les dépendances
      - name: Install dependencies
        run: npm install

      # Étape 4: Attendre que PostgreSQL soit prêt
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U myuser; do
            echo "Waiting for postgres..."
            sleep 5
          done

      # Étape 5: Créer la base de données pour les tests
      - name: Create test database
        run: |
          PGPASSWORD=mypassword psql -h localhost -U myuser -d mydatabase -c "CREATE DATABASE testdb;"

      # Étape 6: Appliquer les migrations Prisma
      - name: Run Prisma migrations
        env:
          DATABASE_URL: postgresql://myuser:mypassword@localhost:5432/testdb?schema=public
        run: npx prisma migrate deploy

      # Étape 7: Exécuter les tests
      - name: Run tests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://myuser:mypassword@localhost:5432/testdb?schema=public
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: testdb
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: myredispasswordfortests
          JWT_SECRET: 0602d6b5abc49a2a7d65c2739dfdad2f966c5fe71754d8d741940f71331cb4320602d6b5abc49a2a7d65c2739dfdad2f966c5fe71754d8d741940f71331cb432
        run: npm run test

      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-report
          path: test-report.html

      # Étape 8: Nettoyer la base de données après les tests
      - name: Drop test database
        run: |
          PGPASSWORD=mypassword psql -h localhost -U myuser -d mydatabase -c "DROP DATABASE IF EXISTS testdb;"
  
  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'javascript,typescript'

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          output: sarif  # génère un rapport au format SARIF pour GitHub Security